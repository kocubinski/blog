#+BLOG: wordpress
#+POSTID: 122
#+DATE: [2016-03-08 Tue 12:06]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: C#, ASP.NET
#+TAGS:
#+DESCRIPTION:
#+TITLE: Ninject Dependency Inject with ASP.NET WebForms

As a maintainer of a legacy C# code base, I recently had the opportunity to refactor a large portion of that
code into a dependency injection framework.  The DI framework I chose was Ninject.  This post will describe my
journey with Ninject and Webforms, hopefully work as a rough HOWTO for the process.

** Installation / Application Registration
At time of writing, the easiest way to get started is with the nuget package [[https://www.nuget.org/packages/Ninject.Web/][Ninject.Web]], install with:
#+BEGIN_EXAMPLE
Install-Package Ninject.Web
#+END_EXAMPLE
from the Package Manager Console in visual studio.  This will install the following dependency graph:

#+BEGIN_EXAMPLE
Ninject.Web
|_Ninject
|_Ninject.Web.Common.WebHost
  |_Ninject.Web.Common
  |_WebActivatorEx
    |_Microsoft.Web.Infrastructure
#+END_EXAMPLE

which are all the assemblies required.  The ~WebActivatorEx~ bit is required for start-up registration and
insertion of Ninject into the request life-cycle.  The rest is the Ninject framework itself.

This will create 2 files under ~App_Data~

#+BEGIN_SRC c
[assembly: WebActivatorEx.PreApplicationStartMethod(typeof(ninjectWebForms2.App_Start.NinjectWeb), "Start")]

namespace ninjectWebForms2.App_Start
{
    using Microsoft.Web.Infrastructure.DynamicModuleHelper;

    using Ninject.Web;

    public static class NinjectWeb
    {
        /// <summary>
        /// Starts the application
        /// </summary>
        public static void Start()
        {
            DynamicModuleUtility.RegisterModule(typeof(NinjectHttpModule));
        }
    }
}
#+END_SRC

#+BEGIN_SRC c
[assembly: WebActivatorEx.PreApplicationStartMethod(typeof(ninjectWebForms2.App_Start.NinjectWebCommon), "Start")]
[assembly: WebActivatorEx.ApplicationShutdownMethodAttribute(typeof(ninjectWebForms2.App_Start.NinjectWebCommon), "Stop")]

namespace ninjectWebForms2.App_Start
{
    using System;
    using System.Web;

    using Microsoft.Web.Infrastructure.DynamicModuleHelper;

    using Ninject;
    using Ninject.Web.Common;

    public static class NinjectWebCommon
    {
        private static readonly Bootstrapper bootstrapper = new Bootstrapper();

        /// <summary>
        /// Starts the application
        /// </summary>
        public static void Start()
        {
            DynamicModuleUtility.RegisterModule(typeof(OnePerRequestHttpModule));
            DynamicModuleUtility.RegisterModule(typeof(NinjectHttpModule));
            bootstrapper.Initialize(CreateKernel);
        }

        /// <summary>
        /// Stops the application.
        /// </summary>
        public static void Stop()
        {
            bootstrapper.ShutDown();
        }

        /// <summary>
        /// Creates the kernel that will manage your application.
        /// </summary>
        /// <returns>The created kernel.</returns>
        private static IKernel CreateKernel()
        {
            var kernel = new StandardKernel();
            try
            {
                kernel.Bind<Func<IKernel>>().ToMethod(ctx => () => new Bootstrapper().Kernel);
                kernel.Bind<IHttpModule>().To<HttpApplicationInitializationHttpModule>();

                RegisterServices(kernel);
                return kernel;
            }
            catch
            {
                kernel.Dispose();
                throw;
            }
        }

        /// <summary>
        /// Load your modules or register your services here!
        /// </summary>
        /// <param name="kernel">The kernel.</param>
        private static void RegisterServices(IKernel kernel)
        {
        }
    }
}
#+END_SRC

** Register Services

** Injection
*** Life-cycle
*** Dynamic Controls
